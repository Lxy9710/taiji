{"version":3,"sources":["main.js"],"names":["demo","document","querySelector","style","string","n","string2","step","setTimeout","innerHTML","substring","window","scrollTo","length"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAX,EAA4C;;AAC5C,IAAIC,KAAK,GAAGF,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAZ;AACA,IAAIE,MAAM,q/CAAV;AA2DA,IAAIC,CAAC,GAAG,CAAR;AACA,IAAIC,OAAO,GAAG,EAAd,EACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACfC,EAAAA,UAAU,CAAC,YAAM;AACfR,IAAAA,IAAI,CAACS,SAAL,GAAiBH,OAAjB;AACAH,IAAAA,KAAK,CAACM,SAAN,GAAkBL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBL,CAApB,CAAlB;AACAM,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,KAAnB;AACAZ,IAAAA,IAAI,CAACY,QAAL,CAAc,CAAd,EAAiB,KAAjB;;AACA,QAAIR,MAAM,CAACC,CAAD,CAAN,KAAc,IAAlB,EAAwB;AACtBC,MAAAA,OAAO,IAAI,MAAX,CADsB,CACH;AACpB,KAFD,MAEO,IAAIF,MAAM,CAACC,CAAD,CAAN,IAAa,GAAjB,EAAsB;AAC3BC,MAAAA,OAAO,IAAI,OAAX,CAD2B,CACP;AACrB,KAFM,MAEA;AACLA,MAAAA,OAAO,IAAIF,MAAM,CAACC,CAAD,CAAjB;AACD;;AACDA,IAAAA,CAAC,IAAI,CAAL;;AAEA,QAAIA,CAAC,IAAID,MAAM,CAACS,MAAhB,EAAwB;AACtBN,MAAAA,IAAI;AACL,KAFD,MAEO,CACN;AACF,GAlBS,EAkBP,CAlBO,CAAV;AAmBD,CApBD;;AAqBAA,IAAI","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["let demo = document.querySelector(\"#demo\"); //通过css选择器找到这个元素 demo即html写的部分 懒得改了\r\nlet style = document.querySelector(\"#style\");\r\nlet string = `\r\n/*hi 我是小梁\r\n接下来加一个样式*/ \r\nbody{\r\n    color:#4682B4;\r\n}\r\n/*然后我们画一个div*/\r\n#div1\r\n{\r\n    border:2px solid #6A5ACD;\r\n    width:200px;\r\n    height:200px;\r\n    left:50%;\r\n    transform:translateX(-50%);\r\n} \r\n\r\n\r\n/*圆的吧*/\r\n#div1 {\r\nborder-radius:50%;\r\nbox-shadow:0 0 3px rgba(0,0,0,0.5);\r\nborder:none;\r\n}\r\n/*加颜色*/\r\n#div1{\r\n    background: rgb(2,0,36);\r\nbackground: linear-gradient(90deg, rgba(2,0,36,1) 50%, rgba(241,241,241,1) 50%, rgba(255,255,255,1) 100%);\r\n}\r\n/*下面就是直接画八卦了 用了伪元素 \r\n  意思是用css在div的第一个和最后一个子元素上分别加东西 \r\n */\r\n#div1::before{\r\n    \r\n    width:100px;\r\n    height:100px;\r\n    top:0;\r\n    left:50%;\r\n    transform:translateX(-50%);\r\n    background:#000;\r\n    border-radius:50%;\r\n    \r\n    background: rgb(255,255,255);\r\nbackground: radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(241,241,241,1) 25%, rgba(2,0,36,1) 25%, rgba(0,0,0,1) 25%, rgba(0,0,0,1) 100%);\r\n}\r\n#div1::after{\r\n    \r\n    width:100px;\r\n    height:100px;\r\n    bottom:0;\r\n    left:50%;\r\n    transform:translateX(-50%);\r\n    background:#fff;\r\n    border-radius:50%;\r\n    \r\n    background: rgb(0,0,0);\r\nbackground: radial-gradient(circle, rgba(0,0,0,1) 0%, rgba(2,0,36,1) 25%, rgba(241,241,241,1) 25%, rgba(255,255,255,1) 100%);\r\n}\r\n\r\n`;\r\nlet n = 0;\r\nlet string2 = \"\";\r\n// string = string.replace(/\\n/g, \"<br>\"); //对string中的回车进行替换,但是会出现尖括号\r\n// setInterval(() => {\r\n//   n = n + 1;\r\n//   demo.innerHTML = n;\r\n// }, 1000); 可用时延来实现 但是递归更稳定些\r\nlet step = () => {\r\n  setTimeout(() => {\r\n    demo.innerHTML = string2;\r\n    style.innerHTML = string.substring(0, n);\r\n    window.scrollTo(0, 99999);\r\n    demo.scrollTo(0, 99999);\r\n    if (string[n] === \"\\n\") {\r\n      string2 += \"<br>\"; //判断是不是回车 进行br替换回车符号 格式美观\r\n    } else if (string[n] == \" \") {\r\n      string2 += \"&nbsp\"; //html语法中的缩进 替换空格\r\n    } else {\r\n      string2 += string[n];\r\n    }\r\n    n += 1;\r\n\r\n    if (n <= string.length) {\r\n      step();\r\n    } else {\r\n    }\r\n  }, 1);\r\n};\r\nstep();\r\n"]}